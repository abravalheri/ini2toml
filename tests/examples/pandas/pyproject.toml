[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "pandas"
description = "Powerful data structures for data analysis, time series, and statistics"
authors = [{name = "The Pandas Development Team", email = "pandas-dev@python.org"}]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Cython",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Scientific/Engineering",
]
dynamic = ["license", "version"]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.18.5",
    "python-dateutil>=2.8.1",
    "pytz>=2020.1",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://pandas.pydata.org"
"Bug Tracker" = "https://github.com/pandas-dev/pandas/issues"
Documentation = "https://pandas.pydata.org/pandas-docs/stable"
"Source Code" = "https://github.com/pandas-dev/pandas"

[project.entry-points.pandas_plotting_backends]
matplotlib = "pandas:plotting._matplotlib"

[project.optional-dependencies]
test = [
    "hypothesis>=5.5.3",
    "pytest>=6.0",
    "pytest-xdist>=1.31",
]

[tool.setuptools]
include-package-data = true
zip-safe = false
platforms = ["any"]

[tool.setuptools.package-data]
"*" = ["templates/*", "_libs/**/*.dll"]

[tool.setuptools.packages.find]
include = ["pandas", "pandas.*"]
# See the docstring in versioneer.py for instructions. Note that you must
# re-run 'versioneer.py setup' after changing this section, and commit the
# resulting files.
namespaces = false

[tool.setuptools.dynamic]
license = "BSD-3-Clause"
license-files = ["LICENSE"]

[tool.distutils.build_ext]
inplace = true

[tool.versioneer]
vcs = "git"
style = "pep440"
versionfile_source = "pandas/_version.py"
versionfile_build = "pandas/_version.py"
tag_prefix = "v"
parentdir_prefix = "pandas-"

[tool.flake8]
max-line-length = "88"
ignore = "\n# space before : (needed for how black formats slicing)\nE203,\n# line break before binary operator\nW503,\n# line break after binary operator\nW504,\n# module level import not at top of file\nE402,\n# do not assign a lambda expression, use a def\nE731,\n# found modulo formatter (incorrect picks up mod operations)\nS001,\n# controversial\nB005,\n# controversial\nB006,\n# controversial\nB007,\n# controversial\nB008,\n# setattr is used to side-step mypy\nB009,\n# getattr is used to side-step mypy\nB010,\n# tests use assert False\nB011,\n# tests use comparisons but not their returned value\nB015,\n# false positives\nB301"
exclude = "\ndoc/sphinxext/*.py,\ndoc/build/*.py,\ndoc/temp/*.py,\n.eggs/*.py,\nversioneer.py,\n# exclude asv benchmark environments from linting\nenv"
per-file-ignores = "\n# private import across modules\npandas/tests/*:PDF020\n# pytest.raises without match=\npandas/tests/extension/*:PDF009\n# os.remove\ndoc/make.py:PDF008\n# import from pandas._testing\npandas/testing.py:PDF014"

[tool.flake8-rst]
max-line-length = "84"
bootstrap = "\nimport numpy as np\nimport pandas as pd\n# avoiding error when importing again numpy or pandas\nnp\n# (in some cases we want to do it to show users)\npd"
ignore = "\n# space before : (needed for how black formats slicing)\nE203,\n# module level import not at top of file\nE402,\n# line break before binary operator\nW503,\n# Classes/functions in different blocks can generate those errors\n# expected 2 blank lines, found 0\nE302,\n# expected 2 blank lines after class or function definition, found 0\nE305,\n# We use semicolon at the end to avoid displaying plot objects\n# statement ends with a semicolon\nE703,\n# comparison to none should be 'if cond is none:'\nE711,"
exclude = "\ndoc/source/development/contributing_docstring.rst,\n# work around issue of undefined variable warnings\n# https://github.com/pandas-dev/pandas/pull/38837#issuecomment-752884156\ndoc/source/getting_started/comparison/includes/*.rst"

[tool.codespell]
ignore-words-list = "ba,blocs,coo,hist,nd,sav,ser"
ignore-regex = "https://(\\w+\\.)+"

[tool.coverage.run]
branch = true
omit = [
    "*/tests/*",
    "pandas/_typing.py",
    "pandas/_version.py",
]
plugins = ["Cython.Coverage"]
source = ["pandas"]

[tool.coverage.report]
ignore_errors = false
show_missing = true
omit = ["pandas/_version.py"]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "AbstractMethodError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "coverage_html_report"
